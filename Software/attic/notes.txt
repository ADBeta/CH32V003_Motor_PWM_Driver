To configure TIM2 as PWM

* Enable TIM2 Clock
* Set TIM2 to be PWM mode
* Set the GPIO Pin to use as output
* Set prescaler value
* Set auto-reload (PWM period)
* Set Compare val (PWM Duty Cycle)
* Enable counter
* Enable Output


Using default TIM2 Layout (CH1ETR)


// Enable TIM2 Clock
RCC->APB1PCENR |= RCC_APB1Periph_TIM2;


// Reset PORTD-4 Flags
GPIOD->CFGLR &= ~(0xf<<(4*4));
// Set PORTD-4 to 10MHz Puls-Pull, Alternate Function
GPIOD->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*4);


// Reset TIM2, Inits all registers
RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;


// Set Prescaler (INPUT / 0)
TIM2->PSC = 0x0000;
// Set PWM total cycle width
TIM2->ATRLR = 255;


// Set the Compare Capture Register
// for channel 1 and 2, let CCxS stay 00 (output), set OCxM to 110 (PWM I)
// enabling preload causes the new pulse width in compare capture register only to come into effect when UG bit in SWEVGR is set (= initiate update) (auto-clears)
TODO:
TIM2->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE | TIM_OC2M_2 | TIM_OC2M_1 | TIM_OC2PE;


// Enable auto-reload
TIM2->CTLR1 |= TIM_ARPE;


// Enable channel outputs
TODO:
TIM2->CCER |= TIM_CC1E | (TIM_CC1P & TIM2_DEFAULT);
TIM2->CCER |= TIM_CC2E | (TIM_CC2P & TIM2_DEFAULT);


// Initialise Counter
TIM2->SWEVGR |= TIM_UG;


// Enable TIM2
TIM2->CTLR1 |= TIM_CEN;


// Set the pulse width
case 0: TIM2->CH1CVR = width; break;



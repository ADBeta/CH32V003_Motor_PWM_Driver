
build/Motor_Driver.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	0f60006f          	j	f6 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000172          	.word	0x00000172
   c:	00000170          	.word	0x00000170
	...
  30:	00000170          	.word	0x00000170
  34:	00000000          	.word	0x00000000
  38:	00000170          	.word	0x00000170
  3c:	00000000          	.word	0x00000000
  40:	00000170          	.word	0x00000170
  44:	00000170          	.word	0x00000170
  48:	00000170          	.word	0x00000170
  4c:	00000170          	.word	0x00000170
  50:	00000170          	.word	0x00000170
  54:	00000170          	.word	0x00000170
  58:	00000170          	.word	0x00000170
  5c:	00000170          	.word	0x00000170
  60:	00000170          	.word	0x00000170
  64:	00000170          	.word	0x00000170
  68:	00000170          	.word	0x00000170
  6c:	00000170          	.word	0x00000170
  70:	00000170          	.word	0x00000170
  74:	00000170          	.word	0x00000170
  78:	00000170          	.word	0x00000170
  7c:	00000170          	.word	0x00000170
  80:	00000170          	.word	0x00000170
  84:	00000170          	.word	0x00000170
  88:	00000170          	.word	0x00000170
  8c:	00000170          	.word	0x00000170
  90:	00000170          	.word	0x00000170
  94:	00000170          	.word	0x00000170
  98:	00000170          	.word	0x00000170
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <gpio_set_mode>:
	
	// Make array of uint8_t from [pin] enum. See definition for details
	uint8_t *byte = (uint8_t *)&pin;
	
	// Set the RCC Register to enable clock on the specified port
	GPIO_RCC->APB2PCENR |= (RCC_APB2PCENR_AFIO | (RCC_APB2PCENR_IOPxEN << byte[0]));
  a0:	400216b7          	lui	a3,0x40021
  a4:	4e90                	lw	a2,24(a3)
  a6:	4791                	li	a5,4
  a8:	00a797b3          	sll	a5,a5,a0
  ac:	8fd1                	or	a5,a5,a2
  ae:	0017e793          	ori	a5,a5,1
  b2:	ce9c                	sw	a5,24(a3)
  b4:	0ff57713          	zext.b	a4,a0

	// Clear then set the GPIO Config Register
	GPIO_PORT_MAP[ byte[0] ]->CFGLR &=        ~(0x0F  << (4 * byte[1]));
  b8:	070a                	slli	a4,a4,0x2
  ba:	34400793          	li	a5,836
  be:	97ba                	add	a5,a5,a4
  c0:	4394                	lw	a3,0(a5)
  c2:	8121                	srli	a0,a0,0x8
  c4:	0ff57513          	zext.b	a0,a0
  c8:	4290                	lw	a2,0(a3)
  ca:	00251713          	slli	a4,a0,0x2
  ce:	47bd                	li	a5,15
  d0:	00e797b3          	sll	a5,a5,a4
  d4:	fff7c793          	not	a5,a5
  d8:	8ff1                	and	a5,a5,a2
  da:	c29c                	sw	a5,0(a3)
	GPIO_PORT_MAP[ byte[0] ]->CFGLR |=  (mode & 0x0F) << (4 * byte[1]);
  dc:	429c                	lw	a5,0(a3)
  de:	00e59733          	sll	a4,a1,a4
  e2:	8f5d                	or	a4,a4,a5
  e4:	c298                	sw	a4,0(a3)

	// If [mode] is INPUT_PULLUP or INPUT_PULLDOWN, set the [OUTDR] Register
	if(mode == INPUT_PULLUP || mode == INPUT_PULLDOWN)
  e6:	47a1                	li	a5,8
  e8:	00f59663          	bne	a1,a5,f4 <gpio_set_mode+0x54>
inline void gpio_digital_write(const GPIO_PIN pin, const GPIO_STATE state)
{
	// Make array of uint8_t from [pin] enum. See definition for details
	uint8_t *byte = (uint8_t *)&pin;

	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
  ec:	67c1                	lui	a5,0x10
	if(state == GPIO_LOW) mask = mask << 16;  // Shift by 16 if LOW, to Reset
  ee:	00a797b3          	sll	a5,a5,a0

	GPIO_PORT_MAP[ byte[0] ]->BSHR = mask;
  f2:	ca9c                	sw	a5,16(a3)
}
  f4:	8082                	ret

000000f6 <handle_reset>:
  f6:	20000197          	auipc	gp,0x20000
  fa:	70a18193          	addi	gp,gp,1802 # 20000800 <_eusrstack>
  fe:	00018113          	mv	sp,gp
 102:	08000513          	li	a0,128
 106:	30051073          	csrw	mstatus,a0
 10a:	468d                	li	a3,3
 10c:	00000517          	auipc	a0,0x0
 110:	ef450513          	addi	a0,a0,-268 # 0 <InterruptVector>
 114:	8d55                	or	a0,a0,a3
 116:	30551073          	csrw	mtvec,a0
 11a:	20000517          	auipc	a0,0x20000
 11e:	ee650513          	addi	a0,a0,-282 # 20000000 <_data_vma>
 122:	20000597          	auipc	a1,0x20000
 126:	ede58593          	addi	a1,a1,-290 # 20000000 <_data_vma>
 12a:	4601                	li	a2,0
 12c:	00b55663          	bge	a0,a1,138 <handle_reset+0x42>
 130:	c110                	sw	a2,0(a0)
 132:	0511                	addi	a0,a0,4
 134:	feb54ee3          	blt	a0,a1,130 <handle_reset+0x3a>
 138:	35400513          	li	a0,852
 13c:	20000597          	auipc	a1,0x20000
 140:	ec458593          	addi	a1,a1,-316 # 20000000 <_data_vma>
 144:	20000617          	auipc	a2,0x20000
 148:	ebc60613          	addi	a2,a2,-324 # 20000000 <_data_vma>
 14c:	00c58863          	beq	a1,a2,15c <handle_reset+0x66>
 150:	4114                	lw	a3,0(a0)
 152:	c194                	sw	a3,0(a1)
 154:	0511                	addi	a0,a0,4
 156:	0591                	addi	a1,a1,4
 158:	fec59ae3          	bne	a1,a2,14c <handle_reset+0x56>
 15c:	e000f7b7          	lui	a5,0xe000f
 160:	4715                	li	a4,5
 162:	c398                	sw	a4,0(a5)
 164:	1e200793          	li	a5,482
 168:	34179073          	csrw	mepc,a5
 16c:	30200073          	mret

00000170 <ADC1_IRQHandler>:
 170:	a001                	j	170 <ADC1_IRQHandler>

00000172 <NMI_Handler>:
 172:	40021737          	lui	a4,0x40021
 176:	471c                	lw	a5,8(a4)
 178:	008006b7          	lui	a3,0x800
 17c:	8fd5                	or	a5,a5,a3
 17e:	c71c                	sw	a5,8(a4)

00000180 <SystemInit>:
 180:	400227b7          	lui	a5,0x40022
 184:	4705                	li	a4,1
 186:	c398                	sw	a4,0(a5)
 188:	400217b7          	lui	a5,0x40021
 18c:	01080737          	lui	a4,0x1080
 190:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
 194:	08170713          	addi	a4,a4,129 # 1080081 <lib_gpioctrl.c.150cf2cb+0x107dc90>
 198:	c398                	sw	a4,0(a5)
 19a:	009f0737          	lui	a4,0x9f0
 19e:	c798                	sw	a4,8(a5)
 1a0:	40021737          	lui	a4,0x40021
 1a4:	431c                	lw	a5,0(a4)
 1a6:	00679693          	slli	a3,a5,0x6
 1aa:	fe06dde3          	bgez	a3,1a4 <SystemInit+0x24>
 1ae:	435c                	lw	a5,4(a4)
 1b0:	400216b7          	lui	a3,0x40021
 1b4:	9bf1                	andi	a5,a5,-4
 1b6:	0027e793          	ori	a5,a5,2
 1ba:	c35c                	sw	a5,4(a4)
 1bc:	4721                	li	a4,8
 1be:	42dc                	lw	a5,4(a3)
 1c0:	8bb1                	andi	a5,a5,12
 1c2:	fee79ee3          	bne	a5,a4,1be <SystemInit+0x3e>
 1c6:	e00007b7          	lui	a5,0xe0000
 1ca:	0f878793          	addi	a5,a5,248 # e00000f8 <_eusrstack+0xbffff8f8>
 1ce:	0007a023          	sw	zero,0(a5)
 1d2:	e00007b7          	lui	a5,0xe0000
 1d6:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 1da:	08000713          	li	a4,128
 1de:	c398                	sw	a4,0(a5)
 1e0:	8082                	ret

000001e2 <main>:
/// @return none
void pwm_set_duty(uint32_t duty);

/*** Main ********************************************************************/
int main()
{
 1e2:	1151                	addi	sp,sp,-12
 1e4:	c406                	sw	ra,8(sp)
 1e6:	c222                	sw	s0,4(sp)
	SystemInit();
 1e8:	3f61                	jal	180 <SystemInit>

	// Set the Op-Amp Input Positive and Negative to Floating
	gpio_set_mode(OPAMP_NEG, INPUT_FLOATING);
 1ea:	4591                	li	a1,4
 1ec:	10000513          	li	a0,256
 1f0:	3d45                	jal	a0 <gpio_set_mode>
	gpio_set_mode(OPAMP_POS, INPUT_FLOATING);
 1f2:	4591                	li	a1,4
 1f4:	20000513          	li	a0,512
 1f8:	3565                	jal	a0 <gpio_set_mode>

	// Set the Default Op-Amp pins to OPP0 and OPN0, then Enable the Op-Amp
	EXTEN->EXTEN_CTR &= ~(EXTEN_OPA_NSEL | EXTEN_OPA_PSEL); 
 1fa:	400247b7          	lui	a5,0x40024
 1fe:	80078793          	addi	a5,a5,-2048 # 40023800 <_eusrstack+0x20023000>
 202:	4398                	lw	a4,0(a5)
 204:	fffa06b7          	lui	a3,0xfffa0
 208:	16fd                	addi	a3,a3,-1 # fff9ffff <_eusrstack+0xdff9f7ff>
 20a:	8f75                	and	a4,a4,a3
 20c:	c398                	sw	a4,0(a5)
	EXTEN->EXTEN_CTR |=  EXTEN_OPA_EN;
 20e:	4398                	lw	a4,0(a5)
 210:	66c1                	lui	a3,0x10
 212:	8f55                	or	a4,a4,a3
 214:	c398                	sw	a4,0(a5)


void gpio_init_adc(const ADC_CLOCK_DIV div, const ADC_SAMPLE_CYCLES cycles)
{
	// Enable the ADC clock
	GPIO_RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
 216:	400217b7          	lui	a5,0x40021
 21a:	4f98                	lw	a4,24(a5)

	// Set ACD Clock Divider
	GPIO_RCC->CFGR0 &= ~ADC_CLOCK_DIV_128;
 21c:	76c1                	lui	a3,0xffff0
 21e:	7ff68693          	addi	a3,a3,2047 # ffff07ff <_eusrstack+0xdffeffff>
	GPIO_RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
 222:	20076713          	ori	a4,a4,512
 226:	cf98                	sw	a4,24(a5)
	GPIO_RCC->CFGR0 &= ~ADC_CLOCK_DIV_128;
 228:	43d8                	lw	a4,4(a5)
 22a:	8f75                	and	a4,a4,a3
 22c:	c3d8                	sw	a4,4(a5)
	GPIO_RCC->CFGR0 |= div;
 22e:	43d8                	lw	a4,4(a5)
	// Set the Sample Register(s) for all channels at once
	GPIO_ADC1->SAMPTR1 = cycles;
	GPIO_ADC1->SAMPTR2 = cycles;

	// Enable the ADC, and set the triggering to external
	GPIO_ADC1->CTLR2 |= ADC_ADON | ADC_EXTSEL;
 230:	000e06b7          	lui	a3,0xe0
 234:	0685                	addi	a3,a3,1 # e0001 <lib_gpioctrl.c.150cf2cb+0xddc10>
	GPIO_RCC->CFGR0 |= div;
 236:	c3d8                	sw	a4,4(a5)
	GPIO_RCC->APB2PRSTR |=  RCC_APB2Periph_ADC1;
 238:	47d8                	lw	a4,12(a5)
 23a:	20076713          	ori	a4,a4,512
 23e:	c7d8                	sw	a4,12(a5)
	GPIO_RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
 240:	47d8                	lw	a4,12(a5)
 242:	dff77713          	andi	a4,a4,-513
 246:	c7d8                	sw	a4,12(a5)
	GPIO_ADC1->RSQR1 = 0;
 248:	400127b7          	lui	a5,0x40012
 24c:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
 250:	0207a623          	sw	zero,44(a5)
	GPIO_ADC1->RSQR2 = 0;
 254:	0207a823          	sw	zero,48(a5)
	GPIO_ADC1->SAMPTR1 = cycles;
 258:	36db7737          	lui	a4,0x36db7
	GPIO_ADC1->RSQR3 = 0;
 25c:	0207aa23          	sw	zero,52(a5)
	GPIO_ADC1->SAMPTR1 = cycles;
 260:	db670713          	addi	a4,a4,-586 # 36db6db6 <_eusrstack+0x16db65b6>
 264:	c7d8                	sw	a4,12(a5)
	GPIO_ADC1->SAMPTR2 = cycles;
 266:	cb98                	sw	a4,16(a5)
	GPIO_ADC1->CTLR2 |= ADC_ADON | ADC_EXTSEL;
 268:	4798                	lw	a4,8(a5)
 26a:	8f55                	or	a4,a4,a3
 26c:	c798                	sw	a4,8(a5)
	
	// Reset calibration, wait for it to finish
	GPIO_ADC1->CTLR2 |= ADC_RSTCAL;
 26e:	4798                	lw	a4,8(a5)
 270:	00876713          	ori	a4,a4,8
 274:	c798                	sw	a4,8(a5)
	while(GPIO_ADC1->CTLR2 & ADC_RSTCAL);
 276:	4798                	lw	a4,8(a5)
 278:	8b21                	andi	a4,a4,8
 27a:	ff75                	bnez	a4,276 <main+0x94>

	// Initiliase the ADC to use 24MHz clock, and Sample for 73 Clock Cycles
	gpio_init_adc(ADC_CLOCK_DIV_2, ADC_SAMPLE_CYCLES_73);
	// Set PD3/A4 and PD4/A7 to Analog Inputs
	gpio_set_mode(MODE_POT,  INPUT_ANALOG);
 27c:	4581                	li	a1,0
 27e:	30300513          	li	a0,771
 282:	3d39                	jal	a0 <gpio_set_mode>
	gpio_set_mode(OPAMP_OUT, INPUT_ANALOG);
 284:	4581                	li	a1,0
 286:	40300513          	li	a0,1027
 28a:	3d19                	jal	a0 <gpio_set_mode>
void pwm_init(void)
{
	// NOTE: Uses TIM2 Channel 3 (PC0) as the PWM Output pin

	// Enable TIM2 Clock
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
 28c:	40021437          	lui	s0,0x40021
 290:	4c5c                	lw	a5,28(s0)

	// Set GPIO-C0 OUTPUT 10MHz, Aleternate Function (Multiplex)
	gpio_set_mode(GPIO_PC0, OUTPUT_10MHZ_PP | OUTPUT_PP_AF);
 292:	45a5                	li	a1,9
 294:	4509                	li	a0,2
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
 296:	0017e793          	ori	a5,a5,1
 29a:	cc5c                	sw	a5,28(s0)
	gpio_set_mode(GPIO_PC0, OUTPUT_10MHZ_PP | OUTPUT_PP_AF);
 29c:	3511                	jal	a0 <gpio_set_mode>

	// Reset TIM2, Inits all registers
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
 29e:	481c                	lw	a5,16(s0)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;

	// Set Prescaler (46kHz)
	TIM2->PSC = 0x0003;
 2a0:	470d                	li	a4,3
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
 2a2:	004946b7          	lui	a3,0x494
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
 2a6:	0017e793          	ori	a5,a5,1
 2aa:	c81c                	sw	a5,16(s0)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
 2ac:	481c                	lw	a5,16(s0)
inline uint16_t gpio_analog_read(const GPIO_ANALOG_CHANNEL chan)
{
	// Set rule channel conversion for single conversion on passed channel
	// GPIO_ADC1->RSQR1 = 0;
	// GPIO_ADC1->RSQR2 = 0;
	GPIO_ADC1->RSQR3 = (uint32_t)chan;
 2ae:	4291                	li	t0,4

	GPIO_ADC1->CTLR2 |= ADC_SWSTART;
 2b0:	00400537          	lui	a0,0x400
 2b4:	9bf9                	andi	a5,a5,-2
 2b6:	c81c                	sw	a5,16(s0)
	TIM2->PSC = 0x0003;
 2b8:	400007b7          	lui	a5,0x40000
 2bc:	02e79423          	sh	a4,40(a5) # 40000028 <_eusrstack+0x1ffff828>
	// Set PWM Max Value (Autoreload Value)
	TIM2->ATRLR = 254;
 2c0:	0fe00713          	li	a4,254
 2c4:	02e79623          	sh	a4,44(a5)

	// Set the Compare Capture Register for Channel 3
	// TIM2_OC3M = 0b111 - PWM Mode 2 - Enable Preload
	TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3M_0 | TIM_OC3PE;
 2c8:	01c7d703          	lhu	a4,28(a5)
	TIM2->CTLR1 |= TIM_CEN;
}

void pwm_set_duty(uint32_t duty)
{
	TIM2->CH3CVR = duty;
 2cc:	40000337          	lui	t1,0x40000
 2d0:	e000f5b7          	lui	a1,0xe000f
	TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3M_0 | TIM_OC3PE;
 2d4:	07876713          	ori	a4,a4,120
 2d8:	00e79e23          	sh	a4,28(a5)
	TIM2->CTLR1 |= TIM_ARPE;
 2dc:	0007d703          	lhu	a4,0(a5)
 2e0:	e0068693          	addi	a3,a3,-512 # 493e00 <lib_gpioctrl.c.150cf2cb+0x491a0f>
 2e4:	08076713          	ori	a4,a4,128
 2e8:	00e79023          	sh	a4,0(a5)
	TIM2->CCER |= TIM_CC3E | TIM_CC3P;
 2ec:	0207d703          	lhu	a4,32(a5)
 2f0:	30076713          	ori	a4,a4,768
 2f4:	02e79023          	sh	a4,32(a5)
	TIM2->SWEVGR |= TIM_UG;
 2f8:	0147d703          	lhu	a4,20(a5)
 2fc:	00176713          	ori	a4,a4,1
 300:	00e79a23          	sh	a4,20(a5)
	TIM2->CTLR1 |= TIM_CEN;
 304:	0007d703          	lhu	a4,0(a5)
 308:	00176713          	ori	a4,a4,1
 30c:	00e79023          	sh	a4,0(a5)
	GPIO_ADC1->RSQR3 = (uint32_t)chan;
 310:	400127b7          	lui	a5,0x40012
 314:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
 318:	0257aa23          	sw	t0,52(a5)
	GPIO_ADC1->CTLR2 |= ADC_SWSTART;
 31c:	4798                	lw	a4,8(a5)
 31e:	8f49                	or	a4,a4,a0
 320:	c798                	sw	a4,8(a5)
	while(!(GPIO_ADC1->STATR & ADC_EOC));
 322:	4398                	lw	a4,0(a5)
 324:	8b09                	andi	a4,a4,2
 326:	df75                	beqz	a4,322 <main+0x140>

	// Get the resulting data from the ADC
	return GPIO_ADC1->RDATAR;
 328:	47f8                	lw	a4,76(a5)
		uint16_t pwm_val = gpio_analog_read(GPIO_ADC_A4) / 4;
 32a:	0742                	slli	a4,a4,0x10
 32c:	8341                	srli	a4,a4,0x10
		pwm_set_duty(pwm_val);
 32e:	8309                	srli	a4,a4,0x2
	TIM2->CH3CVR = duty;
 330:	02e32e23          	sw	a4,60(t1) # 4000003c <_eusrstack+0x1ffff83c>
 334:	4590                	lw	a2,8(a1)
 336:	9636                	add	a2,a2,a3
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 338:	4598                	lw	a4,8(a1)
 33a:	8f11                	sub	a4,a4,a2
 33c:	fe074ee3          	bltz	a4,338 <main+0x156>
 340:	bfe1                	j	318 <main+0x136>
	...

00000344 <GPIO_PORT_MAP>:
 344:	0800 4001 0000 0000 1000 4001 1400 4001     ...@.......@...@


build/Motor_Driver.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	0e40006f          	j	e4 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000160          	.word	0x00000160
   c:	0000015e          	.word	0x0000015e
	...
  30:	0000015e          	.word	0x0000015e
  34:	00000000          	.word	0x00000000
  38:	0000015e          	.word	0x0000015e
  3c:	00000000          	.word	0x00000000
  40:	0000015e          	.word	0x0000015e
  44:	0000015e          	.word	0x0000015e
  48:	0000015e          	.word	0x0000015e
  4c:	0000015e          	.word	0x0000015e
  50:	0000015e          	.word	0x0000015e
  54:	0000015e          	.word	0x0000015e
  58:	0000015e          	.word	0x0000015e
  5c:	0000015e          	.word	0x0000015e
  60:	0000015e          	.word	0x0000015e
  64:	0000015e          	.word	0x0000015e
  68:	0000015e          	.word	0x0000015e
  6c:	0000015e          	.word	0x0000015e
  70:	0000015e          	.word	0x0000015e
  74:	0000015e          	.word	0x0000015e
  78:	0000015e          	.word	0x0000015e
  7c:	0000015e          	.word	0x0000015e
  80:	0000015e          	.word	0x0000015e
  84:	0000015e          	.word	0x0000015e
  88:	0000015e          	.word	0x0000015e
  8c:	0000015e          	.word	0x0000015e
  90:	0000015e          	.word	0x0000015e
  94:	0000015e          	.word	0x0000015e
  98:	0000015e          	.word	0x0000015e
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <gpio_set_mode.constprop.0>:
	
	// Make array of uint8_t from [pin] enum. See definition for details
	uint8_t *byte = (uint8_t *)&pin;
	
	// Set the RCC Register to enable clock on the specified port
	GPIO_RCC->APB2PCENR |= (RCC_APB2PCENR_AFIO | (RCC_APB2PCENR_IOPxEN << byte[0]));
  a0:	40021637          	lui	a2,0x40021
  a4:	4e0c                	lw	a1,24(a2)
  a6:	4711                	li	a4,4
  a8:	00a717b3          	sll	a5,a4,a0
  ac:	8fcd                	or	a5,a5,a1
  ae:	0017e793          	ori	a5,a5,1
  b2:	ce1c                	sw	a5,24(a2)
  b4:	0ff57693          	zext.b	a3,a0

	// Clear then set the GPIO Config Register
	GPIO_PORT_MAP[ byte[0] ]->CFGLR &=        ~(0x0F  << (4 * byte[1]));
  b8:	068a                	slli	a3,a3,0x2
  ba:	1fc00793          	li	a5,508
  be:	97b6                	add	a5,a5,a3
  c0:	4394                	lw	a3,0(a5)
  c2:	8119                	srli	a0,a0,0x6
  c4:	3fc57513          	andi	a0,a0,1020
  c8:	4290                	lw	a2,0(a3)
  ca:	47bd                	li	a5,15
  cc:	00a797b3          	sll	a5,a5,a0
  d0:	fff7c793          	not	a5,a5
  d4:	8ff1                	and	a5,a5,a2
  d6:	c29c                	sw	a5,0(a3)
	GPIO_PORT_MAP[ byte[0] ]->CFGLR |=  (mode & 0x0F) << (4 * byte[1]);
  d8:	429c                	lw	a5,0(a3)
  da:	00a71733          	sll	a4,a4,a0
  de:	8f5d                	or	a4,a4,a5
  e0:	c298                	sw	a4,0(a3)

	// If [mode] is INPUT_PULLUP or INPUT_PULLDOWN, set the [OUTDR] Register
	if(mode == INPUT_PULLUP || mode == INPUT_PULLDOWN)
		gpio_digital_write(pin, mode >> 4);
}
  e2:	8082                	ret

000000e4 <handle_reset>:
  e4:	20000197          	auipc	gp,0x20000
  e8:	71c18193          	addi	gp,gp,1820 # 20000800 <_eusrstack>
  ec:	00018113          	mv	sp,gp
  f0:	08000513          	li	a0,128
  f4:	30051073          	csrw	mstatus,a0
  f8:	468d                	li	a3,3
  fa:	00000517          	auipc	a0,0x0
  fe:	f0650513          	addi	a0,a0,-250 # 0 <InterruptVector>
 102:	8d55                	or	a0,a0,a3
 104:	30551073          	csrw	mtvec,a0
 108:	20000517          	auipc	a0,0x20000
 10c:	ef850513          	addi	a0,a0,-264 # 20000000 <_data_vma>
 110:	20000597          	auipc	a1,0x20000
 114:	ef058593          	addi	a1,a1,-272 # 20000000 <_data_vma>
 118:	4601                	li	a2,0
 11a:	00b55663          	bge	a0,a1,126 <handle_reset+0x42>
 11e:	c110                	sw	a2,0(a0)
 120:	0511                	addi	a0,a0,4
 122:	feb54ee3          	blt	a0,a1,11e <handle_reset+0x3a>
 126:	20c00513          	li	a0,524
 12a:	20000597          	auipc	a1,0x20000
 12e:	ed658593          	addi	a1,a1,-298 # 20000000 <_data_vma>
 132:	20000617          	auipc	a2,0x20000
 136:	ece60613          	addi	a2,a2,-306 # 20000000 <_data_vma>
 13a:	00c58863          	beq	a1,a2,14a <handle_reset+0x66>
 13e:	4114                	lw	a3,0(a0)
 140:	c194                	sw	a3,0(a1)
 142:	0511                	addi	a0,a0,4
 144:	0591                	addi	a1,a1,4
 146:	fec59ae3          	bne	a1,a2,13a <handle_reset+0x56>
 14a:	e000f7b7          	lui	a5,0xe000f
 14e:	4715                	li	a4,5
 150:	c398                	sw	a4,0(a5)
 152:	1d000793          	li	a5,464
 156:	34179073          	csrw	mepc,a5
 15a:	30200073          	mret

0000015e <ADC1_IRQHandler>:
 15e:	a001                	j	15e <ADC1_IRQHandler>

00000160 <NMI_Handler>:
 160:	40021737          	lui	a4,0x40021
 164:	471c                	lw	a5,8(a4)
 166:	008006b7          	lui	a3,0x800
 16a:	8fd5                	or	a5,a5,a3
 16c:	c71c                	sw	a5,8(a4)

0000016e <SystemInit>:
 16e:	400227b7          	lui	a5,0x40022
 172:	4705                	li	a4,1
 174:	c398                	sw	a4,0(a5)
 176:	400217b7          	lui	a5,0x40021
 17a:	01080737          	lui	a4,0x1080
 17e:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
 182:	08170713          	addi	a4,a4,129 # 1080081 <lib_GPIOCTRL.c.8c0f3590+0x107decd>
 186:	c398                	sw	a4,0(a5)
 188:	009f0737          	lui	a4,0x9f0
 18c:	c798                	sw	a4,8(a5)
 18e:	40021737          	lui	a4,0x40021
 192:	431c                	lw	a5,0(a4)
 194:	00679693          	slli	a3,a5,0x6
 198:	fe06dde3          	bgez	a3,192 <SystemInit+0x24>
 19c:	435c                	lw	a5,4(a4)
 19e:	400216b7          	lui	a3,0x40021
 1a2:	9bf1                	andi	a5,a5,-4
 1a4:	0027e793          	ori	a5,a5,2
 1a8:	c35c                	sw	a5,4(a4)
 1aa:	4721                	li	a4,8
 1ac:	42dc                	lw	a5,4(a3)
 1ae:	8bb1                	andi	a5,a5,12
 1b0:	fee79ee3          	bne	a5,a4,1ac <SystemInit+0x3e>
 1b4:	e00007b7          	lui	a5,0xe0000
 1b8:	0f878793          	addi	a5,a5,248 # e00000f8 <_eusrstack+0xbffff8f8>
 1bc:	0007a023          	sw	zero,0(a5)
 1c0:	e00007b7          	lui	a5,0xe0000
 1c4:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 1c8:	08000713          	li	a4,128
 1cc:	c398                	sw	a4,0(a5)
 1ce:	8082                	ret

000001d0 <main>:
/// @return none
void pwm_set_duty(uint32_t duty);

/*** Main ********************************************************************/
int main()
{
 1d0:	1151                	addi	sp,sp,-12
 1d2:	c406                	sw	ra,8(sp)
	SystemInit();
 1d4:	3f69                	jal	16e <SystemInit>

	gpio_set_mode(GPIO_PA1, INPUT_FLOATING);
 1d6:	10000513          	li	a0,256
 1da:	35d9                	jal	a0 <gpio_set_mode.constprop.0>
	gpio_set_mode(GPIO_PA2, INPUT_FLOATING);
 1dc:	20000513          	li	a0,512
 1e0:	35c1                	jal	a0 <gpio_set_mode.constprop.0>
	gpio_set_mode(GPIO_PD4, INPUT_FLOATING);
 1e2:	40300513          	li	a0,1027
 1e6:	3d6d                	jal	a0 <gpio_set_mode.constprop.0>

	EXTEN->EXTEN_CTR |=  EXTEN_OPA_EN;
 1e8:	400247b7          	lui	a5,0x40024
 1ec:	80078793          	addi	a5,a5,-2048 # 40023800 <_eusrstack+0x20023000>
 1f0:	4398                	lw	a4,0(a5)
 1f2:	66c1                	lui	a3,0x10
 1f4:	8f55                	or	a4,a4,a3
 1f6:	c398                	sw	a4,0(a5)


	while(1)
 1f8:	a001                	j	1f8 <main+0x28>
	...

000001fc <GPIO_PORT_MAP>:
 1fc:	0800 4001 0000 0000 1000 4001 1400 4001     ...@.......@...@
